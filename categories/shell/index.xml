<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>Shell - 分类 - Less is more</title>
        <link>https://lushuan.gihub.io/categories/shell/</link>
        <description>Shell - 分类 - Less is more</description>
        <generator>Hugo -- gohugo.io</generator><language>zh-CN</language><managingEditor>lushuan2071@126.com (lushuan)</managingEditor>
            <webMaster>lushuan2071@126.com (lushuan)</webMaster><lastBuildDate>Tue, 28 Apr 2020 12:06:37 &#43;0800</lastBuildDate><atom:link href="https://lushuan.gihub.io/categories/shell/" rel="self" type="application/rss+xml" /><item>
    <title>shell 分类</title>
    <link>https://lushuan.gihub.io/ch0_shell%E5%88%86%E7%B1%BB/</link>
    <pubDate>Tue, 28 Apr 2020 12:06:37 &#43;0800</pubDate>
    <author>lushuan</author>
    <guid>https://lushuan.gihub.io/ch0_shell%E5%88%86%E7%B1%BB/</guid>
    <description><![CDATA[在大部份的 UNIX 系统，三种著名且广被支持的 shell 是 Bourne shell（AT&amp;T shell，在 Linux 下是 BASH）、C shell（Berkeley she]]></description>
</item>
<item>
    <title>shell 入参和默认变量</title>
    <link>https://lushuan.gihub.io/ch1_%E5%85%A5%E5%8F%82%E5%92%8C%E9%BB%98%E8%AE%A4%E5%8F%98%E9%87%8F/</link>
    <pubDate>Mon, 27 Apr 2020 12:06:37 &#43;0800</pubDate>
    <author>lushuan</author>
    <guid>https://lushuan.gihub.io/ch1_%E5%85%A5%E5%8F%82%E5%92%8C%E9%BB%98%E8%AE%A4%E5%8F%98%E9%87%8F/</guid>
    <description><![CDATA[对于shell脚本而言，有些内容是专门用于处理参数的，它们都有特定的含义，例如 1 2 3 /home/shouwang/test.sh para1 para2 para3 $0 $1 $2 $3 其中$0代表了执行的脚本名，$1，$2分]]></description>
</item>
<item>
    <title>shell 变量</title>
    <link>https://lushuan.gihub.io/ch2_%E5%8F%98%E9%87%8F/</link>
    <pubDate>Sun, 26 Apr 2020 12:06:37 &#43;0800</pubDate>
    <author>lushuan</author>
    <guid>https://lushuan.gihub.io/ch2_%E5%8F%98%E9%87%8F/</guid>
    <description><![CDATA[给变量赋值，使用等号即可，但是等号两边千万不要有空格，等号右边有空格的字符串也必须用引号引起来 变量定义 1 2 3 para1=&#34;hello world&#34; #字符串直接赋给变量para]]></description>
</item>
<item>
    <title>shell 命令执行</title>
    <link>https://lushuan.gihub.io/ch3_%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/</link>
    <pubDate>Sun, 26 Apr 2020 12:06:37 &#43;0800</pubDate>
    <author>lushuan</author>
    <guid>https://lushuan.gihub.io/ch3_%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/</guid>
    <description><![CDATA[在shell中执行命令通常只需要像在终端一样执行命令即可，不过，如果想要命令结果打印出来的时候，这样的方式就行不通了。因此，shell的命令]]></description>
</item>
<item>
    <title>shell 条件分支</title>
    <link>https://lushuan.gihub.io/ch4_%E6%9D%A1%E4%BB%B6%E5%88%86%E6%94%AF/</link>
    <pubDate>Sat, 25 Apr 2020 12:06:37 &#43;0800</pubDate>
    <author>lushuan</author>
    <guid>https://lushuan.gihub.io/ch4_%E6%9D%A1%E4%BB%B6%E5%88%86%E6%94%AF/</guid>
    <description><![CDATA[一般说明，如果命令执行成功，则其返回值为0，否则为非0，因此，可以通过下面的方式判断上条命令的执行结果： if 分支 1 2 3 4 5 6 7 8 9 if [ $? -eq 0 ]]]></description>
</item>
<item>
    <title>shell 字符串详解</title>
    <link>https://lushuan.gihub.io/ch19_%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%93%8D%E4%BD%9C%E8%AF%A6%E8%A7%A3/</link>
    <pubDate>Sat, 25 Apr 2020 12:06:37 &#43;0800</pubDate>
    <author>lushuan</author>
    <guid>https://lushuan.gihub.io/ch19_%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%93%8D%E4%BD%9C%E8%AF%A6%E8%A7%A3/</guid>
    <description><![CDATA[Bash Shell 字符串操作详解 Bash 中的字符串操作是脚本编写的核心技能之一，涵盖定义、拼接、截取、替换、匹配等场景。以下是常见用法及示例： 1. 字符串基础 1.1 定义]]></description>
</item>
<item>
    <title>shell 循环</title>
    <link>https://lushuan.gihub.io/ch5_%E5%BE%AA%E7%8E%AF/</link>
    <pubDate>Fri, 24 Apr 2020 12:06:37 &#43;0800</pubDate>
    <author>lushuan</author>
    <guid>https://lushuan.gihub.io/ch5_%E5%BE%AA%E7%8E%AF/</guid>
    <description><![CDATA[for 循环 for 循环一 1 2 3 4 #遍历输出脚本的参数 for i in $@; do echo $i done for 循环方式二 1 2 3 for ((i = 0 ; i &lt; 10 ; i++)); do echo $i done for 循环方式三 1 2 3 for i in {1..5}; do echo &#34;Welcome $i&#34; done]]></description>
</item>
<item>
    <title>shell 函数</title>
    <link>https://lushuan.gihub.io/ch6_%E5%87%BD%E6%95%B0/</link>
    <pubDate>Thu, 23 Apr 2020 12:06:37 &#43;0800</pubDate>
    <author>lushuan</author>
    <guid>https://lushuan.gihub.io/ch6_%E5%87%BD%E6%95%B0/</guid>
    <description><![CDATA[为了完成某一功能的程序指令（语句）的集合，称为函数。Shell 函数的本质是一段可以重复使用的脚本代码，这段代码被提前编写好了，放在了指定的位]]></description>
</item>
<item>
    <title>shell 返回值</title>
    <link>https://lushuan.gihub.io/ch7_%E8%BF%94%E5%9B%9E%E5%80%BC/</link>
    <pubDate>Wed, 22 Apr 2020 12:06:37 &#43;0800</pubDate>
    <author>lushuan</author>
    <guid>https://lushuan.gihub.io/ch7_%E8%BF%94%E5%9B%9E%E5%80%BC/</guid>
    <description><![CDATA[通常函数的return返回值只支持0-255，因此想要获得返回值，可以通过下面的方式。 1 2 3 4 5 function myfunc() { local myresult=&#39;some value&#39; echo $myresult } val=$(myfunc) #val的值为some value]]></description>
</item>
<item>
    <title>shell 注释</title>
    <link>https://lushuan.gihub.io/ch8_%E6%B3%A8%E9%87%8A/</link>
    <pubDate>Tue, 21 Apr 2020 12:06:37 &#43;0800</pubDate>
    <author>lushuan</author>
    <guid>https://lushuan.gihub.io/ch8_%E6%B3%A8%E9%87%8A/</guid>
    <description><![CDATA[shell通过#来注释一行内容，前面我们已经看到过了 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 #!/bin/bash # 这是一行注释 :&#39; 这是 多行 注释 &#39; ls :&lt;&lt;EOF 这也可以 达到 多行注释 的]]></description>
</item>
</channel>
</rss>
